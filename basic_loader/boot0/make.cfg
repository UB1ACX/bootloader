
ROOT    = .
SDKROOT = $(ROOT)/..


# Common configure cross-compiler
include $(SDKROOT)/config/${ARM_CROSS_TOOL}.CFG
include $(SDKROOT)/bsp/$(BSP_PATH)/include/run_addr.cfg


# List of header
INCLUDES	=	-I$(ROOT)                               		\
				-I$(SDKROOT)/config                     		\
				-I$(SDKROOT)/bsp								\
				-I$(SDKROOT)/bsp/$(BSP_PATH)					\
				-I$(SDKROOT)/bsp/$(BSP_PATH)/include            \
				-I$(SDKROOT)/bsp/$(BSP_PATH)/include/interinc   \
				-I$(SDKROOT)/bsp/$(BSP_PATH)/common				\
				-I$(SDKROOT)/bsp/$(BSP_PATH)/init_dram			\
				-I$(SDKROOT)/bsp/$(BSP_PATH)/uart				\
				-I$(SDKROOT)/bsp/$(BSP_PATH)/gpio

ifeq ($(STORAGE_MEDIA_TYPE) , STORAGE_SPINOR)
	INCLUDES        +=	-I$(SDKROOT)/bsp/$(BSP_PATH)/spi
endif
LINK_SCT        = --scatter=$(ROOT)/config/config.sct


# List of library
ifeq ($(STORAGE_MEDIA_TYPE), STORAGE_NAND)
	LIBS            =
	STORAGE_TYPE    = -I$(SDKROOT)/config/storage_media_cfg/nand
	SRCDIRS         = $(shell find $(ROOT)/load_Boot1_from_nand -maxdepth 5 -type d)	\
					  $(shell find $(SDKROOT)/bsp/$(BSP_PATH)/nand -maxdepth 5 -type d)
	TARGET      	= $(LICHEEPATH)/bin/boot0_nand_$(ARCH).bin
	ifneq ($(ARCH1), )
		LICHEEOLDPATH   = $(SDKROOT)/../../tools/pack/chips/$(ARCH1)
		TARGET1      	= $(LICHEEOLDPATH)/bin/boot0_nand_$(ARCH1).bin
	endif
	LOCALTARGET 	= __boot0_nand_$(ARCH).axf
else
	ifeq ($(STORAGE_MEDIA_TYPE), STORAGE_SDMMC)
		LIBS            =
		STORAGE_TYPE    = -I$(SDKROOT)/config/storage_media_cfg/sdcard
		SRCDIRS         = $(shell find $(ROOT)/load_Boot1_from_sdmmc -maxdepth 3 -type d)
		TARGET      	= $(LICHEEPATH)/bin/boot0_sdcard_$(ARCH).bin
		ifneq ($(ARCH1), )
			LICHEEOLDPATH   = $(SDKROOT)/../../tools/pack/chips/$(ARCH1)
			TARGET1      	= $(LICHEEOLDPATH)/bin/boot0_sdcard_$(ARCH1).bin
		endif
		LOCALTARGET 	= __boot0_sdmmc_$(ARCH).axf
	else
		ifeq ($(STORAGE_MEDIA_TYPE), STORAGE_SPINOR)
			LIBS            =
			STORAGE_TYPE    = -I$(SDKROOT)/config/storage_media_cfg/spinor
			SRCDIRS         = $(shell find $(ROOT)/load_Boot1_from_spinor -maxdepth 3 -type d) \
							  $(shell find $(SDKROOT)/bsp/$(BSP_PATH)/spi -maxdepth 5 -type d)
			TARGET      	= $(LICHEEPATH)/bin/boot0_spinor_$(ARCH).bin
			ifneq ($(ARCH1), )
				LICHEEOLDPATH   = $(SDKROOT)/../../tools/pack/chips/$(ARCH1)
				TARGET1      	= $(LICHEEOLDPATH)/bin/boot0_spinor_$(ARCH1).bin
			endif
			LOCALTARGET 	= __boot0_spinor_$(ARCH).axf
		else
			error:
				$(error STORAGE_MEDIA_TYPE is invalid now!!!)
		endif
	endif
endif


# Define the generated object file (output / local)
TMPTARGET   = $(ROOT)/boot0_origin.bin


# List all subdirectories under the project that contain the source program
SRCDIRS	:=	$(SRCDIRS)                                  \
			$(ROOT)                                         \
			$(shell find $(ROOT)/drv -maxdepth 3 -type d)   \
			$(shell find $(ROOT)/lib -maxdepth 3 -type d)   \
			$(shell find $(ROOT)/sys_op -maxdepth 3 -type d)\
			$(SDKROOT)/bsp/$(BSP_PATH)/common				\
			$(SDKROOT)/bsp/$(BSP_PATH)/init_dram			\
			$(SDKROOT)/bsp/$(BSP_PATH)/uart 				\
			$(SDKROOT)/bsp/$(BSP_PATH)/gpio

INCLUDES	:=	$(INCLUDES)                         \
				$(STORAGE_TYPE)						\
				$(foreach dir,$(SRCDIRS),-I$(dir))


ifeq ($(CROSSTOOL), ARMRVDS)

	#===============================================================================
	# Use the RealView Development Suite (RVDS) compiler
	#===============================================================================


	# Program link script
	LINK_SCT   := $(LINK_SCT)


	# Compiler extension parameter
	CFLAGS     := $(CFLAGS) -O2 --debug
	CFLAGS     := $(CFLAGS) $(INCLUDES)

	ifeq ($(FLAGS) , SUN7I_HOMLET)
		CFLAGS	   :=$(CFLAGS) -D$(FLAGS)
	endif

	
	# Assembler extension parameters
	ASFLAGS    := $(ASFLAGS) --debug --keep
	ASFLAGS    := $(ASFLAGS) $(INCLUDES)


	# Linker extension parameter
	LKFLAGS    := $(LKFLAGS) --pd="-DRUN_ADDR=$(BOOT0_RUN_ADDR)" $(LINK_SCT)


	# Loader extension parameter
	LDFLAGS    := $(LDFLAGS) --bin --output

else

	#===============================================================================
	# Use the GNU-GCC compiler
	#===============================================================================
	error:
		$(error GNU Cross-tool is invalid now!!!)

endif

